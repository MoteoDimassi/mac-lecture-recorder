#!/usr/bin/env python3
"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø–∏—Å–µ–π –¥–ª—è Mac Lecture Recorder
"""

import streamlit as st
import os
from pathlib import Path
import time

def main():
    st.set_page_config(
        page_title="–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π", 
        page_icon="üìö",
        layout="wide"
    )
    
    st.title("üìö –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π")
    st.markdown("---")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é sessions –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    sessions_dir = Path("sessions")
    sessions_dir.mkdir(exist_ok=True)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π
    sessions = []
    for file in sessions_dir.glob("session-*.wav"):
        session_name = file.stem
        wav_file = file
        txt_file = file.with_suffix('.wav.txt')
        md_file = file.with_suffix('.wav.md')
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
        creation_time = file.stat().st_mtime
        creation_str = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(creation_time))
        
        sessions.append({
            'name': session_name,
            'wav': wav_file,
            'txt': txt_file,
            'md': md_file,
            'time': creation_str,
            'size': file.stat().st_size
        })
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
    sessions.sort(key=lambda x: x['time'], reverse=True)
    
    if not sessions:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π
    for session in sessions:
        with st.expander(f"üìù {session['name']} - {session['time']}", expanded=False):
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.write(f"**–í—Ä–µ–º—è:** {session['time']}")
                size_mb = session['size'] / (1024 * 1024)
                st.write(f"**–†–∞–∑–º–µ—Ä:** {size_mb:.1f} MB")
            
            with col2:
                if session['txt'].exists():
                    st.success("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≥–æ—Ç–æ–≤")
                else:
                    st.warning("‚è≥ –ù–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞")
                
                if session['md'].exists():
                    st.success("‚úÖ –ö–æ–Ω—Å–ø–µ–∫—Ç –≥–æ—Ç–æ–≤")
                else:
                    st.warning("‚è≥ –ù–µ—Ç –∫–æ–Ω—Å–ø–µ–∫—Ç–∞")
            
            with col3:
                if session['wav'].exists():
                    if st.button("üì• –°–∫–∞—á–∞—Ç—å WAV", key=f"wav_{session['name']}"):
                        with open(session['wav'], "rb") as f:
                            st.download_button(
                                label="–°–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ",
                                data=f.read(),
                                file_name=f"{session['name']}.wav",
                                mime="audio/wav"
                            )
                
                if session['txt'].exists():
                    if st.button("üìÑ –°–∫–∞—á–∞—Ç—å TXT", key=f"txt_{session['name']}"):
                        with open(session['txt'], "r") as f:
                            st.download_button(
                                label="–°–∫–∞—á–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç",
                                data=f.read(),
                                file_name=f"{session['name']}.txt",
                                mime="text/plain"
                            )
                
                if session['md'].exists():
                    if st.button("üìë –°–∫–∞—á–∞—Ç—å MD", key=f"md_{session['name']}"):
                        with open(session['md'], "r") as f:
                            st.download_button(
                                label="–°–∫–∞—á–∞—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç",
                                data=f.read(),
                                file_name=f"{session['name']}.md",
                                mime="text/markdown"
                            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
            if session['txt'].exists():
                st.subheader("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç:")
                with open(session['txt'], "r") as f:
                    transcript_content = f.read()
                    st.text_area("", transcript_content, height=150, key=f"transcript_{session['name']}")
            
            if session['md'].exists():
                st.subheader("–ö–æ–Ω—Å–ø–µ–∫—Ç:")
                with open(session['md'], "r") as f:
                    summary_content = f.read()
                    st.markdown(summary_content)

if __name__ == "__main__":
    main()
