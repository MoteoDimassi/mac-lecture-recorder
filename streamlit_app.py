#!/usr/bin/env python3
"""
Streamlit GUI –¥–ª—è Mac Lecture Recorder
–ï–¥–∏–Ω—ã–π –¥–∏–∫—Ç–æ—Ñ–æ–Ω–æ–ø–æ–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å AI-—Ñ—É–Ω–∫—Ü–∏—è–º–∏
"""

import streamlit as st
import time
import os
import threading
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from app import (
    list_avfoundation_devices, 
    parse_audio_devices, 
    record as app_record, 
    stop as app_stop, 
    transcribe as app_transcribe, 
    summarize as app_summarize
)

def show_history():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø–∏—Å–µ–π"""
    try:
        from pages.history import main as history_main
        history_main()
    except ImportError:
        st.error("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")

def show_settings():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        from pages.settings import main as settings_main
        settings_main()
    except ImportError:
        st.error("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")

def main():
    st.set_page_config(
        page_title="Mac Lecture Recorder", 
        page_icon="üé§",
        layout="wide"
    )
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    st.sidebar.title("üé§ Mac Lecture Recorder")
    page = st.sidebar.radio(
        "–ù–∞–≤–∏–≥–∞—Ü–∏—è",
        ["–î–∏–∫—Ç–æ—Ñ–æ–Ω", "–ò—Å—Ç–æ—Ä–∏—è", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"],
        index=0
    )
    
    if page == "–ò—Å—Ç–æ—Ä–∏—è":
        show_history()
        return
    elif page == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        show_settings()
        return
    
    # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –î–∏–∫—Ç–æ—Ñ–æ–Ω
    st.title("üé§ Mac Lecture Recorder")
    st.markdown("---")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if 'is_recording' not in st.session_state:
        st.session_state.is_recording = False
    if 'start_time' not in st.session_state:
        st.session_state.start_time = None
    if 'current_session' not in st.session_state:
        st.session_state.current_session = None
    if 'processing' not in st.session_state:
        st.session_state.processing = False
    
    # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    col1, col2, col3 = st.columns([1, 2, 1])
    with col1:
        record_button = st.button("‚è∫Ô∏è –ó–∞–ø–∏—Å—å", key="record", 
                                disabled=st.session_state.is_recording or st.session_state.processing)
        stop_button = st.button("‚èπÔ∏è –°—Ç–æ–ø", key="stop", 
                              disabled=not st.session_state.is_recording)
    with col2:
        if st.session_state.processing:
            status_text = "–û–±—Ä–∞–±–æ—Ç–∫–∞..."
        elif st.session_state.is_recording:
            status_text = "–ó–∞–ø–∏—Å—å –∞–∫—Ç–∏–≤–Ω–∞..."
        else:
            status_text = "–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏"
        st.info(status_text)
    with col3:
        if st.session_state.is_recording and st.session_state.start_time:
            elapsed = time.time() - st.session_state.start_time
            st.progress(min(elapsed / 3600, 1.0))  # –ü—Ä–æ–≥—Ä–µ—Å—Å (max 1 —á–∞—Å)
            st.caption(f"‚è±Ô∏è {time.strftime('%H:%M:%S', time.gmtime(elapsed))}")
        elif st.session_state.processing:
            st.caption("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
    
    st.markdown("---")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
    col1, col2 = st.columns([1, 2])
    
    with col1:
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
        st.subheader("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–Ω—è—Ç–∏–∏")
        student_name = st.text_input("–ò–º—è —É—á–µ–Ω–∏–∫–∞", "")
        lesson_topic = st.text_input("–¢–µ–º–∞ –∑–∞–Ω—è—Ç–∏—è", "")
        
        # –í—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        st.subheader("–ê—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
        try:
            ffmpeg_output = list_avfoundation_devices()
            devices_list = parse_audio_devices(ffmpeg_output)
            
            if devices_list:
                mic_options = {f"{name} ({idx})": idx for idx, name in devices_list}
                sys_options = mic_options.copy()
                
                selected_mic = st.selectbox("üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω", list(mic_options.keys()))
                selected_sys = st.selectbox("üîä –°–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫", list(sys_options.keys()))
                
                if record_button:
                    start_recording(mic_options[selected_mic], sys_options[selected_sys], 
                                  student_name, lesson_topic)
                
                if stop_button:
                    stop_recording()
            else:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤")
                st.code(ffmpeg_output)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {str(e)}")
    
    with col2:
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∏ –∫–æ–Ω—Å–ø–µ–∫—Ç
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
        st.markdown("**–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:**")
        transcript_area = st.empty()
        
        # –ö–æ–Ω—Å–ø–µ–∫—Ç
        st.markdown("**–ö–æ–Ω—Å–ø–µ–∫—Ç:**")
        summary_area = st.empty()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if st.session_state.current_session:
            session_file = st.session_state.current_session
            transcript_file = f"{session_file}.txt"
            summary_file = f"{session_file}.md"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
            if os.path.exists(transcript_file):
                with open(transcript_file, "r") as f:
                    transcript_content = f.read()
                    transcript_area.text_area("", transcript_content, height=200, key="transcript_display")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Å–ø–µ–∫—Ç
            if os.path.exists(summary_file):
                with open(summary_file, "r") as f:
                    summary_content = f.read()
                    summary_area.markdown(summary_content)

def start_recording(mic_index, sys_index, student_name, lesson_topic):
    """–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
        timestamp = time.strftime("%Y%m%d-%H%M%S")
        session_file = f"sessions/session-{timestamp}"
        
        st.session_state.current_session = session_file
        st.session_state.start_time = time.time()
        st.session_state.is_recording = True
        
        # –ó–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def record_thread():
            try:
                app_record(
                    mic_index=mic_index,
                    sys_index=sys_index,
                    out=Path(f"{session_file}.wav")
                )
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {str(e)}")
        
        thread = threading.Thread(target=record_thread)
        thread.daemon = True
        thread.start()
        
        st.success(f"–ó–∞–ø–∏—Å—å –Ω–∞—á–∞—Ç–∞: {session_file}.wav")
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏: {str(e)}")

def stop_recording():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –∏ –Ω–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É"""
    try:
        st.session_state.is_recording = False
        st.session_state.processing = True
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏
        app_stop()
        
        if st.session_state.current_session:
            # –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            def process_thread():
                try:
                    session_file = st.session_state.current_session
                    wav_file = f"{session_file}.wav"
                    
                    # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
                    app_transcribe(
                        audio=Path(wav_file),
                        engine="local",
                        language="ru"
                    )
                    
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Å–ø–µ–∫—Ç–∞
                    app_summarize(
                        transcript=Path(f"{session_file}.txt"),
                        student="",  # –ü–æ–∫–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
                        topic="",    # –ü–æ–∫–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
                        out_md=Path(f"{session_file}.md")
                    )
                    
                    st.session_state.processing = False
                    
                except Exception as e:
                    st.session_state.processing = False
                    st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
            
            thread = threading.Thread(target=process_thread)
            thread.daemon = True
            thread.start()
        
        st.success("–ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞...")
        
    except Exception as e:
        st.session_state.processing = False
        st.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏: {str(e)}")

if __name__ == "__main__":
    main()
